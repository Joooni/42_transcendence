# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Channel {
  id: String!
  owner: User!
  name: String!
  type: ChannelType!
  password: String!
  createdAt: DateTime!
  users: [User!]
  admins: [User!]
  mutedUsers: [User!]
  invitedUsers: [User!]
  bannedUsers: [User!]
}

enum ChannelType {
  public
  private
  protected
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: Int!
  intra: String!
  firstname: String!
  lastname: String!
  username: String!
  email: String!
  picture: String!
  twoFAEnabled: Boolean!
  hasTwoFASecret: Boolean!
  status: String!
  wins: Float!
  losses: Float!
  socketid: String!
  xp: Float!
  map: Float!
  achievements: [Int!]!
  selectedMap: Float!
  lastLoginTimestamp: Timestamp!
  ownedChannels: Channel
  channelList: [Channel!]
  adminInChannel: [Channel!]
  mutedInChannel: [Channel!]
  invitedInChannel: [Channel!]
  bannedInChannel: [Channel!]
  friends: [User!]
  sendFriendRequests: [User!]
  incomingFriendRequests: [User!]
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type Match {
  gameID: Int!
  firstPlayer: String!
  secondPlayer: String!
  goalsFirstPlayer: Int!
  goalsSecondPlayer: Int!
  date: DateTime!
}

type Message {
  id: Int!
  sender: User!
  receiverUser: User!
  receiverChannel: Channel!
  timestamp: DateTime!
  content: String!
}

type Query {
  allUsers: [User!]!
  allUsersExceptMyself: [User!]!
  userById(id: Int): User!
  userByName(username: String!): User!
  messages: [Message!]!
  messagesDM(id: Int, idReceiver: Int): [Message!]!
  messagesChannel(id: String): [Message!]!
  channels: [Channel!]!
  channel(id: String): Channel!
  channelByName(name: String): Channel!
  visibleChannelsWithoutUser(id: Int): [Channel!]!
  matches: [Match!]!
  match(id: Int): Match!
}

type Mutation {
  updateUsername(username: String!): User!
  updateSelectedMap(selectedMap: Float!): User!
  updateStatus(status: String!): User!
  updateAchievements(id: Float!, newAchievement: Float!): User!
}